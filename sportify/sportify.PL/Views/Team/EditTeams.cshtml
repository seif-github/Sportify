@model sportify.PL.ViewModels.LeagueDetailsViewModel

@{
    Layout = "_LeagueLayout";
    ViewData["Title"] = "League Teams";
}

@section LeagueHeader {
    <partial name="_LeagueHeader" model="Model" />
}

<div class="container py-4">
    <!-- Team Cards Grid with Inline Editing -->
    <div class="card mb-4">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h3 class="mb-0">Teams</h3>
        </div>
        <div class="card-body">
            <div class="row">
                @foreach (var team in Model.Teams)
                {
                    <div class="col-md-6 col-lg-4 mb-4">
                        <div class="card h-100">
                            <div class="card-body text-center">
                                <div class="rounded-circle bg-white d-flex align-items-center justify-content-center shadow-sm mx-auto mb-3"
                                     style="width: 60px; height: 60px;">
                                    @if (!string.IsNullOrEmpty(team.imageUrl))
                                    {
                                        <img src="@team.imageUrl" class="img-fluid rounded-circle" alt="@team.Name" />
                                    }
                                    else
                                    {
                                        <i class="ph ph-users text-muted" style="font-size: 24px;"></i>
                                    }
                                </div>

                                @if (Model.IsOrganizer)
                                {
                                    <div class="team-edit-container" data-team-id="@team.TeamID">
                                        <h5 class="team-name-display">@team.Name</h5>

                                        <div class="team-edit-controls" style="display: none;">
                                            <div class="input-group mb-2">
                                                <input type="text" class="form-control text-center team-name-input"
                                                       value="@team.Name">
                                                <button class="btn btn-outline-success save-team-btn" type="button">Save</button>
                                                <button class="btn btn-outline-danger cancel-edit-btn" type="button">Cancel</button>
                                            </div>
                                        </div>

                                        <button class="btn btn-sm btn-outline-secondary edit-team-btn mt-2">
                                            <i class="ph ph-pencil-simple"></i> Edit
                                        </button>

                                        @* <button type="button"  *@
                                        @*         class="btn btn-sm btn-outline-danger mt-2 delete-team-btn"  *@
                                        @*         data-team-id="@team.TeamID" *@
                                        @*         data-delete-account> *@
                                        @*     <i class="ph ph-trash"></i> Delete *@
                                        @* </button> *@
                                    </div>
                                }
                                else
                                {
                                    <h5 class="card-title">@team.Name</h5>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Add Team Section (for organizers) -->
    @if (Model.IsOrganizer)
    {
        <div class="teams-card card mb-4">
            <div class="card-header">
                <h3>Add New Team</h3>
            </div>
            <div class="card-body">
                <form method="post" asp-action="AddTeam">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="leagueId" value="@Model.League.LeagueID" />

                    <div class="mb-3">
                        <label for="teamName" class="form-label">Team Name</label>
                        <input type="text" class="form-control" id="teamName" name="teamName" required />
                    </div>

                    <div class="mb-3">
                        <label for="teamImage" class="form-label">Team Image URL (optional)</label>
                        <input type="url" class="form-control" id="teamImage" name="imageUrl" />
                    </div>

                    <div class="d-grid">
                        <button type="submit" class="btn btn-success">
                            <i class="fas fa-plus"></i> Add Team
                        </button>
                    </div>
                </form>
            </div>
        </div>
    }

    <!-- Delete Confirmation Modal -->
    <div id="deleteModal" class="modal-overlay">
        <div class="modal-container">
            <div class="modal-header">
                <h3>Confirm Team Deletion</h3>
                <button class="modal-close">&times;</button>
            </div>
            <div class="modal-body">
                <i class="ph ph-warning-circle modal-icon"></i>
                <p>Are you sure you want to permanently delete this team? This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                <button id="cancelDelete" class="btn btn-secondary">Cancel</button>
                <form asp-action="DeleteTeam" method="post" style="display: inline;">
                    @Html.AntiForgeryToken()
                    <input type="hidden" id="modalTeamId" name="teamId" value="" />
                    <input type="hidden" name="leagueId" value="@Model.League.LeagueID" />
                    <button type="submit" class="btn btn-danger">Delete Team</button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Setup edit buttons
            document.querySelectorAll('.edit-team-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const container = this.closest('.team-edit-container');
                    const nameDisplay = container.querySelector('.team-name-display');
                    const editControls = container.querySelector('.team-edit-controls');

                    nameDisplay.style.display = 'none';
                    editControls.style.display = 'block';
                    this.style.display = 'none';

                    // Focus on the input
                    editControls.querySelector('.team-name-input').focus();
                });
            });

            // Setup cancel buttons
            document.querySelectorAll('.cancel-edit-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const container = this.closest('.team-edit-container');
                    const nameDisplay = container.querySelector('.team-name-display');
                    const editControls = container.querySelector('.team-edit-controls');
                    const editBtn = container.querySelector('.edit-team-btn');

                    nameDisplay.style.display = 'block';
                    editControls.style.display = 'none';
                    editBtn.style.display = 'inline-block';
                });
            });

            // Setup save buttons
            document.querySelectorAll('.save-team-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const container = this.closest('.team-edit-container');
                    const teamId = container.dataset.teamId;
                    const nameInput = container.querySelector('.team-name-input');
                    const nameDisplay = container.querySelector('.team-name-display');
                    const editControls = container.querySelector('.team-edit-controls');
                    const editBtn = container.querySelector('.edit-team-btn');

                    // Get request verification token
                    const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

                    fetch('@Url.Action("EditTeam")', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': token
                        },
                        body: JSON.stringify({
                            TeamID: teamId,
                            Name: nameInput.value,
                            LeagueID: @Model.League.LeagueID
                        })
                    })
                    .then(response => {
                        if (response.ok) {
                            nameDisplay.textContent = nameInput.value;
                            nameDisplay.style.display = 'block';
                            editControls.style.display = 'none';
                            editBtn.style.display = 'inline-block';
                        } else {
                            throw new Error('Failed to update');
                        }
                    })
                    .catch(error => {
                        alert('Error updating team name');
                        console.error(error);
                    });
                });
            });

            // Delete team modal setup
            const modal = document.getElementById('deleteModal');
            const closeBtn = document.querySelector('.modal-close');
            const cancelBtn = document.getElementById('cancelDelete');

            // Handle all delete buttons
            document.querySelectorAll('.delete-team-btn').forEach(btn => {
                btn.addEventListener('click', function(e) {
                    e.preventDefault();
                    const teamId = this.getAttribute('data-team-id');
                    document.getElementById('modalTeamId').value = teamId;
                    modal.classList.add('active');
                    document.body.style.overflow = 'hidden';
                });
            });

            // Close modal handlers
            [closeBtn, cancelBtn].forEach(btn => {
                btn.addEventListener('click', () => {
                    modal.classList.remove('active');
                    document.body.style.overflow = '';
                });
            });

            // Close modal when clicking outside
            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    modal.classList.remove('active');
                    document.body.style.overflow = '';
                }
            });
        });
    </script>
}