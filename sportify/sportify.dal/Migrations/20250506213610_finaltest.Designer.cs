// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using sportify.DAL.Data;

#nullable disable

namespace sportify.DAL.Migrations
{
    [DbContext(typeof(SportifyContext))]
    [Migration("20250506213610_finaltest")]
    partial class finaltest
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TeamTournament", b =>
                {
                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("TournamentId")
                        .HasColumnType("int");

                    b.HasKey("TeamId", "TournamentId");

                    b.HasIndex(new[] { "TournamentId" }, "IX_TeamTournaments_TournamentId");

                    b.ToTable("TeamTournaments", (string)null);
                });

            modelBuilder.Entity("sportify.DAL.Entities.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AwayTeamId")
                        .HasColumnType("int");

                    b.Property<int>("HomeTeamId")
                        .HasColumnType("int");

                    b.Property<DateTime>("MatchDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TournamentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "AwayTeamId" }, "IX_Matches_AwayTeamId");

                    b.HasIndex(new[] { "HomeTeamId" }, "IX_Matches_HomeTeamId");

                    b.HasIndex(new[] { "TournamentId" }, "IX_Matches_TournamentId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("sportify.DAL.Entities.MatchStatistic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Goals")
                        .HasColumnType("int");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<int>("RedCards")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("YellowCards")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "MatchId" }, "IX_MatchStatistics_MatchId");

                    b.HasIndex(new[] { "TeamId" }, "IX_MatchStatistics_TeamId");

                    b.ToTable("MatchStatistics");
                });

            modelBuilder.Entity("sportify.DAL.Entities.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "TeamId" }, "IX_Players_TeamId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("sportify.DAL.Entities.PlayerStatistic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Assists")
                        .HasColumnType("int");

                    b.Property<int>("Goals")
                        .HasColumnType("int");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("RedCards")
                        .HasColumnType("int");

                    b.Property<int>("YellowCards")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "MatchId" }, "IX_PlayerStatistics_MatchId");

                    b.HasIndex(new[] { "PlayerId" }, "IX_PlayerStatistics_PlayerId");

                    b.ToTable("PlayerStatistics");
                });

            modelBuilder.Entity("sportify.DAL.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FoundedYear")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("ManagerUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StadiumName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ManagerUserId" }, "IX_Teams_ManagerUserId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("sportify.DAL.Entities.TeamTournamentMatchStatistic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Corners")
                        .HasColumnType("int");

                    b.Property<int>("Fouls")
                        .HasColumnType("int");

                    b.Property<int>("GoalsConceded")
                        .HasColumnType("int");

                    b.Property<int>("GoalsScored")
                        .HasColumnType("int");

                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<int>("Offsides")
                        .HasColumnType("int");

                    b.Property<int>("Possession")
                        .HasColumnType("int");

                    b.Property<int>("RedCards")
                        .HasColumnType("int");

                    b.Property<int>("ShotsOffTarget")
                        .HasColumnType("int");

                    b.Property<int>("ShotsOnTarget")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("TournamentId")
                        .HasColumnType("int");

                    b.Property<int>("YellowCards")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "MatchId" }, "IX_TeamTournamentMatchStatistics_MatchId");

                    b.HasIndex(new[] { "TeamId" }, "IX_TeamTournamentMatchStatistics_TeamId");

                    b.HasIndex(new[] { "TournamentId" }, "IX_TeamTournamentMatchStatistics_TournamentId");

                    b.ToTable("TeamTournamentMatchStatistics");
                });

            modelBuilder.Entity("sportify.DAL.Entities.Tournament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("sportify.DAL.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("FavoriteTeamId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "FavoriteTeamId" }, "IX_Users_FavoriteTeamId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TeamTournament", b =>
                {
                    b.HasOne("sportify.DAL.Entities.Team", null)
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sportify.DAL.Entities.Tournament", null)
                        .WithMany()
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("sportify.DAL.Entities.Match", b =>
                {
                    b.HasOne("sportify.DAL.Entities.Team", "AwayTeam")
                        .WithMany("MatchAwayTeams")
                        .HasForeignKey("AwayTeamId")
                        .IsRequired();

                    b.HasOne("sportify.DAL.Entities.Team", "HomeTeam")
                        .WithMany("MatchHomeTeams")
                        .HasForeignKey("HomeTeamId")
                        .IsRequired();

                    b.HasOne("sportify.DAL.Entities.Tournament", "Tournament")
                        .WithMany("Matches")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AwayTeam");

                    b.Navigation("HomeTeam");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("sportify.DAL.Entities.MatchStatistic", b =>
                {
                    b.HasOne("sportify.DAL.Entities.Match", "Match")
                        .WithMany("MatchStatistics")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sportify.DAL.Entities.Team", "Team")
                        .WithMany("MatchStatistics")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("sportify.DAL.Entities.Player", b =>
                {
                    b.HasOne("sportify.DAL.Entities.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("sportify.DAL.Entities.PlayerStatistic", b =>
                {
                    b.HasOne("sportify.DAL.Entities.Match", "Match")
                        .WithMany("PlayerStatistics")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sportify.DAL.Entities.Player", "Player")
                        .WithMany("PlayerStatistics")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("sportify.DAL.Entities.Team", b =>
                {
                    b.HasOne("sportify.DAL.Entities.User", "ManagerUser")
                        .WithMany("Teams")
                        .HasForeignKey("ManagerUserId");

                    b.Navigation("ManagerUser");
                });

            modelBuilder.Entity("sportify.DAL.Entities.TeamTournamentMatchStatistic", b =>
                {
                    b.HasOne("sportify.DAL.Entities.Match", "Match")
                        .WithMany("TeamTournamentMatchStatistics")
                        .HasForeignKey("MatchId")
                        .IsRequired();

                    b.HasOne("sportify.DAL.Entities.Team", "Team")
                        .WithMany("TeamTournamentMatchStatistics")
                        .HasForeignKey("TeamId")
                        .IsRequired();

                    b.HasOne("sportify.DAL.Entities.Tournament", "Tournament")
                        .WithMany("TeamTournamentMatchStatistics")
                        .HasForeignKey("TournamentId")
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("Team");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("sportify.DAL.Entities.User", b =>
                {
                    b.HasOne("sportify.DAL.Entities.Team", "FavoriteTeam")
                        .WithMany("Users")
                        .HasForeignKey("FavoriteTeamId");

                    b.Navigation("FavoriteTeam");
                });

            modelBuilder.Entity("sportify.DAL.Entities.Match", b =>
                {
                    b.Navigation("MatchStatistics");

                    b.Navigation("PlayerStatistics");

                    b.Navigation("TeamTournamentMatchStatistics");
                });

            modelBuilder.Entity("sportify.DAL.Entities.Player", b =>
                {
                    b.Navigation("PlayerStatistics");
                });

            modelBuilder.Entity("sportify.DAL.Entities.Team", b =>
                {
                    b.Navigation("MatchAwayTeams");

                    b.Navigation("MatchHomeTeams");

                    b.Navigation("MatchStatistics");

                    b.Navigation("Players");

                    b.Navigation("TeamTournamentMatchStatistics");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("sportify.DAL.Entities.Tournament", b =>
                {
                    b.Navigation("Matches");

                    b.Navigation("TeamTournamentMatchStatistics");
                });

            modelBuilder.Entity("sportify.DAL.Entities.User", b =>
                {
                    b.Navigation("Teams");
                });
#pragma warning restore 612, 618
        }
    }
}
